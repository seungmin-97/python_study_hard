# print("Hello, python!")

# 주석(comment) : 컴퓨터가 읽는 부분이 아니라 사람이 읽을 수 있도록 정보를 제공하는 방법으로 주석처리가 되어있는
# 부분은 파이썬 인터프리터가 코드로 인지하지않음.

# 미리 작성해놓고 후에 주석 처리를 하는 방법 : ctrl + /

'''
다중 주석 처리

앞으로 우리가 필기를 하게되는 내용이 여러 줄이 걸쳐있을 경우에는 미리 작은 따옴표 세 개(누르면 세 개 더 나옴)를 눌러주고
타이핑을 진행하게 됩니다. -> 엔터쳤을 때 자동으로 나머지 세 개의 작은 따옴표가ㅏ 내려가게되면서 ctrl + /를 할 필요가
없다는 장점이 있겠습니다.

1번 라인에서 우리가 작성한 print("Hello, python!")을 분석하겠습니다.
'''
from codecs import namereplace_errors

# print("1")
# print(1)
# print(Hello, python!) -> 오류 발생

'''
19-20번 라인의 출력 결과가 동일하기 때문에 큰타옴표의 필요성에 대해 인지하지 못할 수 있지만, 21번 라인이 오류가
발생하는 점에서 차이를 발견할 수 있습니다.
'''

# print(type("1")) # <class 'str'>
# print(type(1))   # <class 'int'>
# # type의 차이에 따른 검증
# print("1" +  "2") # 결과값 : 12
# print(1+2)        # 결과값 : 3
#
# print("2" + "1")    # 결과값 : 21  / 문자열이라서 순서가 중요
# print(2+1)          # 결과값 : 3   / 정수라서 1+2 = 2+1

'''
print() : 컴퓨터한테 출력해달라고 요청하는 명령어
type() : 소괄호 내에 들어가있는 데이터가 어떤 자료형인지 표시하는 명령어
    -> 주로 print() 함수와 합쳐져서 사용됨.
str : string의 축약어로 '문자열'을 의미.
int : integer의 축약어로 '정수'를 의미.

여러분들이 자기 소개를 한다고 가정했을 때, 그것이 콘솔에 출력되려면 ""내에 작성을 해야겠네요.
'''
# print("제 이름은 박승민입니다. 나이는 18살이고, 부산광역시 영도구에 삽니다.")
# print("MBTI는 (검사안해봄)입니다."
#       "엔터를 치니까 뭐가 추가됐네요.")
# print('''
# 이런 경우에는 엔터를 치게 됐을 경우에 콘솔에서 엔터키가 적용이 된 상태로 작성이 가능합니다.
# ''')
'''
그런데 지금 보니까 콘솔창에 찍히는 문자 개수보다 우리가 타이핑하는게 훨씬 많은 상황입니다.
콘솔창에서는 print("")만큼은 출력을 해주지 않으니까요.
'''
# print("제 이름은 박승민입니다. 나이는 18살이고. 부산광역시 영도구에 삽니다.")
# introduction = "제 이름은 박승민입니다. 나이는 18살이고. 부산광역시 영도구에 삽니다."
# a = "제 이름은 박승민입니다. 나이는 18살이고. 부산광역시 영도구에 삽니다."

# print(a)
#
# print(type(introduction))

'''
변수(variable) : 데이터를 저장하는 바구니 -> 이름을 어떻게 붙여주는가는 자유롭습니다. 
a 도 가능/ introduction도 가능

변수 명명 규칙(python 버전으로)
1. 변수의 경우 소문자로만 입력한다.
2. 여러 단어가 합쳐진 변수의 경우 _로 연결한다.
 ex) shcool_name -> 이런 것을 snake case라고 합니다.
 cf) Java의 경우에는 schoolName으로 작성함.
 
name 이라는 변수에 여러분 이름을 대입
age 이라는 변수에 여러분의 나이를 대입해보세요.

그리고 콘솔창에(예를 들어 이름이 김일 / 나이가 20살이고 가정했을 경우)

김일
21
이라고 출력되도록 코드를 작성하시오. 
'''

# name = "박승민"
# age = 18

# print("박승민")
# print(17)

# print(name)
# print(age + 1)      # 변수에 정수가 담겨있다면 수학적 연산이 가능
#
# # print(b)  # 오류 발생 -> 코드는 순서대로 실행됩니다.
# b = 1
# print(b)    # 결과값 : 1
# b = b+1
# print(b)    # 결과값 : 2

'''
대입연산자
1. = : = 오른쪽에 있는 데이터를 = 왼쪽에 있는 변수에 대입한다는 의미. 즉 94번 라인의 b = 1는 1이라는 데이터를 
b라는 변수에 대입하고, 96번라인에서 b(1) + 1라는 데이터를 다시 b라는 변수에 데입했다는 의미로 그 결과 97번 라인에서
2가 출력됨

변수는 처음에 변수 이름을 정하고 "=" 표시 뒤에 넣고자 하는 데이터를 집어넣으면 print()를 통해서 출력하거나 혹은
수학적 연산이 가능하고, 동일한 변수명에 새로운 데이터를 다시 집어넣는 것도 가능.
'''

# introduction = "----------------"
# print(introduction)

'''
f-string : formatted string의 축약어로 str내에 변수를 불러올 수 있음.
"" 내에 변수를 불러오기 위해서는 중괄호({})를 삽입하고, 불러오고자 하는 변수를 기입함.
'''
# print(f"제 이름은 {name}이고, 나이는 {age}살입니다. 내년에는 {age+1}살이 됩니다.")

'''
지금까지 수업한 방식으로는 미리 데이터를 준비해놓고, 거기에 변수를 데입합니다.
즉 실시간으로 데이터를 입력할 수가 없습니다.

이름이 "김일"이었다가 "김이"로 바꾸기 위해서는
name = "김일"
print(name)
name = "김이"
print(name)
과 같은 방식으로 코드를 작성해야 하는 번거로움이 있습니다.
이를 해결하기 위해서 우리는 input()을 이용할 수 있습니다.
'''
# input("당신의 이름이 무엇입니까? >>> ")
'''
위와 같이 입력하고 실행시키면 콘솔창에 이름을 입력할 수 있도록 커서가 깜빡거립니다.
거기에 이름을 입력하면 프로그램이 종료된다는 점을 확인할 수 있습니다.

즉, 데이터를 입력 받기는 했지만 변수에 저장하는 과정이 없었기 때문에 데이터가 휘발됩니다.
그렇다면 입력 받은 값을 변수에 대입하면 저장이 되겠네요.
'''
name = input("당신의 이름이 무엇입니까? >>> ")
print(name)
print(f"제 이름은 {name}입니다")
'''
과 같은 방식으로요.

138-140라인까지의 코드 분석합니다. input() 함수는 () 안에 있는 질문 사항(프롬포트)을 콘솔에 출력하여 사용자로
하여금 입력받을 수 있게끔 합니다.
사용자가 프로포트에 맞는 정보를 입력하면, 그 데이터는 name이라는 변수에 저장되고, 이를 print()함수를 통해 콘솔로
출력하게 됩니다.

다 되신 분은 chapter0 우클릭 -> new -> python package 클릭하시고
band_name 이라는 이름을 붙여주세요
band_name 우클릭 -> new -> python file 선택하시고
main이라고 이름 붙여 주세요.
'''